#########################
# Codecademy Specific Commands
#########################

# Edit this file
alias es='e ~/.codecademyrc'

# Aliases
alias f='cd ~/repos/Codecademy'
alias gg='cd ~/repos/client-modules/packages/gamut'
alias gc='cd ~/repos/client-modules'
alias gp='cd ~/repos/portal-app'
alias zwork='mux start zwork'
alias prod='export AWS_PROFILE=prod'
alias nonprod='export AWS_PROFILE=nonprod'
alias nd='n "Check on deploy" 7&'
alias yg='yarn gql;n'


nonprod

alias rl='bundle exec rubocop --safe'

# Autogenerated from repos/bootstrap/bootstrap.sh
eval "$(rbenv init -)"

export NVM_DIR="/Users/zackfleischman/.nvm"
[ -s "/usr/local/opt/nvm/nvm.sh" ] && . "/usr/local/opt/nvm/nvm.sh"  # This loads nvm

export PATH="$HOME/.yarn/bin:$HOME/.config/yarn/global/node_modules/.bin:$PATH"

autoload -Uz compinit
compinit

source <(kubectl completion zsh)
alias k=kubectl
complete -F __start_kubectl k


# Env variables

export CODECADEMY_DIR="$HOME/repos/Codecademy/"

# If not using docker-compose
export ENV="localdev" # This can be anything, it only sets name for a deploy target

# NVM
export NVM_DIR="$HOME/.nvm"
[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"  # This loads nvm
# Autoload .nvmrc node versions when switching dirs
autoload -U add-zsh-hook
load-nvmrc() {
  local node_version="$(nvm version)"
  local nvmrc_path="$(nvm_find_nvmrc)"
  if [ -n "$nvmrc_path" ]; then
    local nvmrc_node_version=$(nvm version "$(cat "${nvmrc_path}")")
    if [ "$nvmrc_node_version" = "N/A" ]; then
      nvm install
    elif [ "$nvmrc_node_version" != "$node_version" ]; then
      nvm use
    fi
  elif [ "$node_version" != "$(nvm version default)" ]; then
    echo "Reverting to nvm default version"
    nvm use default
  fi
}
add-zsh-hook chpwd load-nvmrc
load-nvmrc

# Dump all EC2 instance Ids for production servers
prodInstances () {
    aws-vault exec prod -- aws ec2 describe-instances --query 'Reservations[*].Instances[*].[InstanceId, Tags[?Key==`Name`] | [0].Value]' --output text | sort
}

# Dump all EC2 instance Ids for nonprod (e.g. staging/zoo) servers
nonprodInstances () {
    aws-vault exec nonprod -- aws ec2 describe-instances --query 'Reservations[*].Instances[*].[InstanceId, Tags[?Key==`Name`] | [0].Value]' --output text | sort
}

# Dump all EC2 instance Ids for prod monolith servers
alias prodMonolithInstances="prodInstances | grep webapp.monolith.production.us-east-1.asg | nl"
# Dump all EC2 instance Ids for prod worker/sidekiq servers
alias prodWorkerInstances="prodInstances | grep worker.monolith.production.us-east-1.asg | nl"
# Dump all EC2 instance Ids for staging monolith servers
alias stagingMonolithInstances="stagingInstances | grep webapp.monolith.staging.us-east-1.asg | nl"

# ssh/ssm into a specific production EC2 instance
# Usage: prodInstanceSh i-01e89c0d762b6238f
prodInstanceSh () {
  if [ -z $1 ]
  then 
    echo "Err: Must specify a production instance id"
  else
    aws-vault exec prod -- aws ssm start-session --target $1
  fi
}

# ssh/ssm into a specific non-prod EC2 instance
# Usage: nonprodInstanceSh i-01e89c0d762b6238f
nonprodInstanceSh () {
  if [ -z $1 ]
  then 
    echo "Err: Must specify a nonprod instance id"
  else
    aws-vault exec nonprod -- aws ssm start-session --target $1
  fi
}

# ssh/ssm into a production monolith server.
prodsh () {
  instanceid=$(aws-vault exec prod -- \
   aws ec2 describe-instances --query \
   'Reservations[*].Instances[*].[InstanceId, Tags[?Key==`Name`] | [0].Value]' \
    --output text | grep worker.monolith.production.us-east-1.asg | cut -f 1 | head -n 1)
  if [ -z "$instanceid" ]
  then
    echo "Could not find InstanceId for production monolith server"
  else
    echo "Found InstanceId for production monolith server to be $instanceid"
    aws-vault exec prod -- aws ssm start-session --target $instanceid
  fi
}

# ssh/ssm into a production worker/sidekiq server.
workersh () {
  instanceid=$(aws-vault exec prod -- \
   aws ec2 describe-instances --query \
   'Reservations[*].Instances[*].[InstanceId, Tags[?Key==`Name`] | [0].Value]' \
    --output text | grep worker.monolith.production.us-east-1.asg | cut -f 1 | head -n 1)
  if [ -z "$instanceid" ]
  then
    echo "Could not find InstanceId for production worker server"
  else
    echo "Found InstanceId for production worker server to be $instanceid"
    aws-vault exec prod -- aws ssm start-session --target $instanceid
  fi
}

# ssh/ssm into a staging monolith server.
stagingsh () {
  instanceid=$(aws-vault exec nonprod -- \
   aws ec2 describe-instances --query \
   'Reservations[*].Instances[*].[InstanceId, Tags[?Key==`Name`] | [0].Value]' \
    --output text | grep webapp.monolith.staging | cut -f 1 | head -n 1)
  if [ -z "$instanceid" ]
  then
    echo "Could not find InstanceId for staging"
  else
    echo "Found InstanceId for staging to be $instanceid"
    aws-vault exec nonprod -- aws ssm start-session --target $instanceid
  fi
}

# Connect to a zoo server using aws-vault and aws ssm
# Usage example: zoosh badger
zoosh () {
  if [ -z $1 ]
  then 
  	echo "Err: Must specify a zoo server name"
  else
    instanceid=$(aws-vault exec nonprod -- \
     aws ec2 describe-instances --query \
     'Reservations[*].Instances[*].[InstanceId, Tags[?Key==`Deploy_Namespace`] | [0].Value]' \
     --filters "Name=tag:Deploy_Namespace,Values=$1" --output text | cut -f 1)
    if [ -z "$instanceid" ]
    then
  	  echo "Could not find InstanceId for $1"
    else
      echo "Found InstanceId for $1 to be $instanceid"
      aws-vault exec nonprod -- aws ssm start-session --target $instanceid
    fi
  fi
}

