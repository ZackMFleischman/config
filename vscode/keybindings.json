// Place your key bindings in this file to override the defaultsauto[]
[
  {
    "key": "shift+alt+o",
    "command": "-editor.action.organizeImports",
    "when": "editorTextFocus && !editorReadonly && supportedCodeAction =~ /(\\s|^)source\\.organizeImports\\b/"
  },
  {
    "key": "shift+alt+o",
    "command": "vscodeWorkspaceSwitcher.switchWorkspace"
  },
  {
    "key": "ctrl+k w",
    "command": "-vscodeWorkspaceSwitcher.switchWorkspace"
  },
  {
    "key": "escape",
    "command": "workbench.action.toggleSidebarVisibility",
    "when": "sideBarFocus && sideBarVisible"
  },
  {
    "key": "cmd+d",
    "command": "-extension.vim_cmd+d",
    "when": "editorTextFocus && vim.active && vim.use<D-d> && !inDebugRepl"
  },
  {
    "key": "cmd+d",
    "command": "-extension.vim_cmd+d",
    "when": "editorTextFocus && vim.active && vim.use<D-d> && !inDebugRepl"
  },
  {
    "key": "cmd+d",
    "command": "-editor.action.addSelectionToNextFindMatch",
    "when": "editorFocus"
  },
  {
    "key": "cmd+d",
    "command": "editor.action.revealDefinition",
    "when": "editorHasDefinitionProvider && editorTextFocus && !isInEmbeddedEditor"
  },
  {
    "key": "f12",
    "command": "-editor.action.revealDefinition",
    "when": "editorHasDefinitionProvider && editorTextFocus && !isInEmbeddedEditor"
  },
  {
    "key": "shift+cmd+d",
    "command": "editor.action.goToTypeDefinition"
  },
  {
    "key": "shift+cmd+d",
    "command": "-workbench.view.debug"
  },
  {
    "key": "shift+cmd+d",
    "command": "-workbench.view.debug"
  },
  {
    "key": "shift+alt+.",
    "command": "-gitlens.diffWithWorking",
    "when": "editorTextFocus && config.gitlens.keymap == 'alternate' && gitlens:activeFileStatus =~ /revision/"
  },
  {
    "key": "shift+alt+.",
    "command": "editor.action.indentLines",
    "when": "editorTextFocus && !editorReadonly"
  },
  {
    "key": "cmd+]",
    "command": "-editor.action.indentLines",
    "when": "editorTextFocus && !editorReadonly"
  },
  {
    "key": "shift+alt+,",
    "command": "editor.action.outdentLines",
    "when": "editorTextFocus && !editorReadonly"
  },
  {
    "key": "cmd+[",
    "command": "-editor.action.outdentLines",
    "when": "editorTextFocus && !editorReadonly"
  },
  {
    "key": "shift+cmd+,",
    "command": "-editor.action.inPlaceReplace.up",
    "when": "editorTextFocus && !editorReadonly"
  },
  {
    "key": "shift+alt+,",
    "command": "-gitlens.diffLineWithPrevious",
    "when": "editorTextFocus && config.gitlens.keymap == 'alternate' && gitlens:activeFileStatus =~ /tracked/"
  },
  {
    "key": "shift+alt+cmd+b",
    "command": "gitlens.toggleLineBlame"
  },
  {
    "key": "alt+cmd+b",
    "command": "gitlens.toggleFileBlame",
    "when": "editorTextFocus && config.gitlens.keymap == 'alternate' && gitlens:activeFileStatus =~ /blameable/"
  },
  {
    "key": "alt+b",
    "command": "-gitlens.toggleFileBlame",
    "when": "editorTextFocus && config.gitlens.keymap == 'alternate' && gitlens:activeFileStatus =~ /blameable/"
  },
  {
    "key": "alt+cmd+b",
    "command": "gitlens.toggleFileBlame",
    "when": "editorTextFocus && config.gitlens.keymap == 'chorded' && gitlens:activeFileStatus =~ /blameable/"
  },
  {
    "key": "alt+cmd+g b",
    "command": "-gitlens.toggleFileBlame",
    "when": "editorTextFocus && config.gitlens.keymap == 'chorded' && gitlens:activeFileStatus =~ /blameable/"
  },
  {
    "key": "ctrl+alt+cmd+b",
    "command": "gitlens.toggleFileHeatmap"
  },
  {
    "key": "cmd+o",
    "command": "workbench.action.togglePanel"
  },
  {
    "key": "cmd+j",
    "command": "-workbench.action.togglePanel"
  },
  {
    "key": "shift+cmd+o",
    "command": "workbench.action.toggleMaximizedPanel"
  },
  {
    "key": "ctrl+k",
    "command": "-extension.vim_ctrl+k",
    "when": "editorTextFocus && vim.active && vim.use<C-k> && !inDebugRepl"
  },
  {
    "key": "ctrl+k",
    "command": "-deleteAllRight",
    "when": "textInputFocus && !editorReadonly"
  },
  {
    "key": "ctrl+k",
    "command": "workbench.action.focusAboveGroup"
  },
  {
    "key": "cmd+k cmd+up",
    "command": "-workbench.action.focusAboveGroup"
  },
  {
    "key": "ctrl+j",
    "command": "workbench.action.focusBelowGroup"
  },
  {
    "key": "cmd+k cmd+down",
    "command": "-workbench.action.focusBelowGroup"
  },
  {
    "key": "cmd+k cmd+left",
    "command": "-workbench.action.focusLeftGroup"
  },
  {
    "key": "ctrl+l",
    "command": "workbench.action.focusRightGroup"
  },
  {
    "key": "cmd+k cmd+right",
    "command": "-workbench.action.focusRightGroup"
  },
  {
    "key": "alt+cmd+n",
    "command": "workbench.action.files.newUntitledFile"
  },
  {
    "key": "cmd+n",
    "command": "-workbench.action.files.newUntitledFile"
  },
  {
    "key": "alt+n",
    "command": "search.action.focusNextSearchResult",
    "when": "hasSearchResult"
  },
  {
    "key": "f4",
    "command": "-search.action.focusNextSearchResult",
    "when": "hasSearchResult"
  },
  {
    "key": "shift+cmd+n",
    "command": "search.action.focusPreviousSearchResult",
    "when": "hasSearchResult"
  },
  {
    "key": "shift+f4",
    "command": "-search.action.focusPreviousSearchResult",
    "when": "hasSearchResult"
  },
  {
    "key": "shift+alt+cmd+n",
    "command": "workbench.action.newWindow"
  },
  {
    "key": "shift+cmd+n",
    "command": "-workbench.action.newWindow"
  },
  {
    "key": "alt+d",
    "command": "workbench.view.debug"
  },
  {
    "key": "shift+alt+d",
    "command": "workbench.action.debug.start",
    "when": "!inDebugMode"
  },
  {
    "key": "f5",
    "command": "-workbench.action.debug.start",
    "when": "!inDebugMode"
  },
  {
    "key": "cmd+r",
    "command": "-workbench.action.reloadWindow",
    "when": "isDevelopment"
  },
  {
    "key": "cmd+r",
    "command": "editor.action.rename",
    "when": "editorHasRenameProvider && editorTextFocus && !editorReadonly"
  },
  {
    "key": "f2",
    "command": "-editor.action.rename",
    "when": "editorHasRenameProvider && editorTextFocus && !editorReadonly"
  },
  {
    "key": "ctrl+a",
    "command": "-cursorLineStart",
    "when": "textInputFocus"
  },
  {
    "key": "alt+f",
    "command": "editor.action.format"
  },
  {
    "key": "shift+alt+cmd+w",
    "command": "workbench.action.openRecent"
  },
  {
    "key": "ctrl+r",
    "command": "-workbench.action.openRecent"
  },
  {
    "key": "alt+r",
    "command": "workbench.action.tasks.runTask",
    "args": "runCurrentTest"
  },
  {
      "key": "cmd+shift+f",
      "command": "workbench.action.tasks.runTask",
      "args": "Format"
  },
  {
    "key": "cmd+h",
    "command": "workbench.action.focusLeftGroup"
  },
  {
    "key": "cmd+l",
    "command": "workbench.action.focusRightGroup"
  },
  {
    "key": "cmd+j",
    "command": "workbench.action.focusBelowGroup"
  },
  {
    "key": "cmd+k",
    "command": "workbench.action.focusBelowGroup"
  },
  {
    "key": "ctrl+k",
    "command": "workbench.action.openGlobalKeybindings"
  },
  {
    "key": "cmd+k cmd+s",
    "command": "-workbench.action.openGlobalKeybindings"
  },
  {
    "key": "shift+cmd+l",
    "command": "workbench.action.moveEditorToRightGroup"
  },
  {
    "key": "shift+cmd+h",
    "command": "workbench.action.moveEditorToLeftGroup"
  },
  {
    "key": "shift+cmd+k",
    "command": "workbench.action.moveEditorToAboveGroup"
  },
  {
    "key": "shift+cmd+j",
    "command": "workbench.action.moveEditorToBelowGroup"
  },
  {
    "key": "cmd+n",
    "command": "newFile.createNewFile"
  },
  {
    "key": "alt+cmd+n",
    "command": "-newFile.createNewFile"
  },
  {
    "key": "cmd+i",
    "command": "-editor.action.triggerSuggest",
    "when": "editorHasCompletionItemProvider && textInputFocus && !editorReadonly"
  },
  {
    "key": "shift+cmd+i",
    "command": "workbench.action.toggleSidebarVisibility"
  },
  {
    "key": "cmd+b",
    "command": "-workbench.action.toggleSidebarVisibility"
  },
  {
    "key": "cmd+o",
    "command": "-workbench.action.files.openFileFolder"
  },
  {
    "key": "cmd+o",
    "command": "-workbench.action.files.openLocalFileFolder",
    "when": "remoteFileDialogVisible"
  },
  {
    "key": "shift+cmd+o",
    "command": "-workbench.action.gotoSymbol"
  },
  {
    "key": "cmd+i",
    "command": "editor.action.sourceAction",
    "args": {
        "kind": "source.addMissingImports",
        "apply": "first"
    }
  },
  {
    "key": "alt+x",
    "command": "extension.multiCommand.execute",
    "args": { 
        "sequence": [
            "eslint.restart",
            "typescript.restartTsServer",
        ]
    }
  }
]